{
  "consoleLog": {
    "prefix": "clg",
    "body": "console.log(${1:object});",
    "description": "Displays a message in the console"
  },
  "consoleLogObject": {
    "prefix": "clo",
    "body": "console.log('${1:object} :>> ', ${1:object});",
    "description": "Displays an object in the console with its name"
  },
  "import": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}';$0",
    "description": "Imports entire module statement in ES6 syntax"
  },
  "importDestructing": {
    "prefix": "imd",
    "body": "import { $2 } from '${1:module}';$0",
    "description": "Imports only a portion of the module in ES6 syntax"
  },
  "importEverything": {
    "prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}';$0",
    "description": "Imports everything as alias from the module in ES6 syntax"
  },
  "importAs": {
    "prefix": "ima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}';$0",
    "description": "Imports a specific portion of the module by assigning a local alias in ES6 syntax"
  },
  "export default function": {
    "prefix": "edf",
    "body": "export default function ${1:functionName}() {$0};",
    "description": "Export default function"
  },
  "Typescript React Functional Component": {
    "prefix": "tsrfc",
    "body": [
      "import React from 'react';",
      "",
      "export interface ${1:${MyApp}}Props {}",
      "",
      "const ${1:${MyApp}} = ({}: ${1:${MyApp}}Props) => {",
      "\treturn <div>${2:}</div>;",
      "};",
      "",
      "export default ${1:${MyApp}};",
      ""
    ],
    "description": "Create a Typescript React Function Component"
  },
  "useState": {
		"prefix": "ush",
		"body": [
			"const [${1}, set${1/(.*)/${1:/capitalize}/}] = React.useState($2);$0"
		],
		"description": "React useState() hook"
	},
	"useEffect": {
		"prefix": "ueh",
		"body": [
			"React.useEffect(() => {",
			"\t$1",
			"\n\treturn () => {",
			"\t\t$2",
			"\t}",
			"}, [${3}]);$0"
		],
		"description": "React useEffect() hook"
	},
	"useContext": {
		"prefix": "uch",
		"body": [
			"const $1 = React.useContext($2);$0"
		],
		"description": "React useContext() hook"
	},
	"useCallback": {
		"prefix": "ucbh",
		"body": [
			"const ${1:memoizedCallback} = React.useCallback(",
			"\t() => {",
			"\t\t${2:doSomething}(${3:a}, ${4:b})",
			"\t},",
			"\t[${5:a}, ${6:b}],",
			");$0"
		],
		"description": "React useCallback() hook"
	},
	"useMemo": {
		"prefix": "umh",
		"body": [
			"const ${1:memoizedValue} = React.useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}]);$0"
		],
		"description": "React useMemo() hook"
	},
	"useRef": {
		"prefix": "urh",
		"body": [
			"const $1 = React.useRef($2);$0"
		],
		"description": "React useRef() hook"
	}
}
