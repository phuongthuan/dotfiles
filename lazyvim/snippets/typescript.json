{
  "import": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}';$0",
    "description": "Imports entire module statement in ES6 syntax"
  },
  "importDestructing": {
    "prefix": "imd",
    "body": "import { $2 } from '${1:module}';$0",
    "description": "Imports only a portion of the module in ES6 syntax"
  },
  "importEverything": {
    "prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}';$0",
    "description": "Imports everything as alias from the module in ES6 syntax"
  },
  "importAs": {
    "prefix": "ima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}';$0",
    "description": "Imports a specific portion of the module by assigning a local alias in ES6 syntax"
  },
  "require": {
    "prefix": "rqr",
    "body": "require('${1:package}');",
    "description": "Require a package"
  },
  "requireToConst": {
    "prefix": "req",
    "body": "const ${1:packageName} = require('${1:package}');$0",
    "description": "Require a package to const"
  },
  "exportNamedVariable": {
    "prefix": "env",
    "body": "export const ${1:exportVariable} = ${2:localVariable};\n",
    "description": "Export named variable in ES6 syntax"
  },
  "exportNamedFunction": {
    "prefix": "enf",
    "body": "export const ${1:functionName} = (${2:params}) => {\n\t$0\n};\n",
    "description": "Export named function in ES6 syntax"
  },
  "exportDefaultFunction": {
    "prefix": "edf",
    "body": "export default function ${1:${TM_FILENAME_BASE}}(${2:params}) {\n\t$0\n};\n",
    "description": "Export default function in ES6 syntax"
  },
  "constructor": {
    "prefix": "con",
    "body": "constructor(${1:params}) {\n\t${0}\n}",
    "description": "Add default constructor in a class in ES6 syntax"
  },
  "method": {
    "prefix": "met",
    "body": "${1:methodName}(${2:params}) {\n\t${0}\n}",
    "description": "Creates a method inside a class in ES6 syntax"
  },
  "forEach": {
    "prefix": "fre",
    "body": "${1:array}.forEach(${2:currentItem} => {\n\t${0}\n});",
    "description": "Creates a forEach statement in ES6 syntax"
  },
  "forOf": {
    "prefix": "fof",
    "body": "for (const ${1:item} of ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property names of iterable objects"
  },
  "forIn": {
    "prefix": "fin",
    "body": "for (const ${1:item} in ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property values of iterable objects"
  },
  "anonymousFunction": {
    "prefix": "anfn",
    "body": "(${1:params}) => {\n\t${2}\n}",
    "description": "Creates an anonymous function in ES6 syntax"
  },
  "namedFunction": {
    "prefix": "nfn",
    "body": "const ${1:name} = (${2:params}) => {\n\t${3}\n}",
    "description": "Creates a named function in ES6 syntax"
  },
  "destructingObject": {
    "prefix": "dob",
    "body": "const {${2:propertyName}} = ${1:objectToDestruct};",
    "description": "Creates and assigns a local variable using object destructing"
  },
  "destructingArray": {
    "prefix": "dar",
    "body": "const [${2:propertyName}] = ${1:arrayToDestruct};",
    "description": "Creates and assigns a local variable using array destructing"
  },
  "setInterval": {
    "prefix": "sti",
    "body": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms});",
    "description": "Executes the given function at specified intervals in ES6 syntax"
  },
  "setTimeOut": {
    "prefix": "sto",
    "body": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms});",
    "description": "Executes the given function after the specified delay in ES6 syntax"
  },
  "promise": {
    "prefix": "prom",
    "body": "return new Promise((resolve, reject) => {\n\t${1}\n});",
    "description": "Creates and returns a new Promise in the standard ES6 syntax"
  },
  "consoleDir": {
    "prefix": "cdi",
    "body": "console.dir(${1:object});",
    "description": "Prints a JavaScript representation of the specified object"
  },
  "consoleError": {
    "prefix": "cer",
    "body": "console.error(${1:object});",
    "description": "Displays a message in the console and also includes a stack trace from where the method was called"
  },
  "consoleLog": {
    "prefix": "clg",
    "body": "console.log(${1:object});",
    "description": "Displays a message in the console"
  },
  "consoleLogObject": {
    "prefix": "clo",
    "body": "console.log('${1:object} :>> ', ${1:object});",
    "description": "Displays an object in the console with its name"
  },
  "consoleWarn": {
    "prefix": "cwa",
    "body": "console.warn(${1:object});",
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
  },
  "consoleInfo": {
    "prefix": "cin",
    "body": "console.info(${1:object});",
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
  },
  "useState": {
    "prefix": "ush",
    "body": ["const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);$0"],
    "description": "React useState() hook"
  },
  "useEffect": {
    "prefix": "ueh",
    "body": [
      "useEffect(() => {",
      "\t$1",
      "\n\treturn cleanUp = () => {",
      "\t\t$2",
      "\t}",
      "}, [${3}]);$0"
    ],
    "description": "React useEffect() hook"
  },
  "useContext": {
    "prefix": "uch",
    "body": ["const $1 = useContext($2);$0"],
    "description": "React useContext() hook"
  },
  "useCallback": {
    "prefix": "ucbh",
    "body": [
      "const ${1:memoizedCallback} = useCallback(",
      "\t() => {",
      "\t\t${2:doSomething}(${3:a}, ${4:b})",
      "\t},",
      "\t[${5:a}, ${6:b}],",
      ");$0"
    ],
    "description": "React useCallback() hook"
  },
  "useMemo": {
    "prefix": "umh",
    "body": [
      "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}]);$0"
    ],
    "description": "React useMemo() hook"
  },
  "useRef": {
    "prefix": "urh",
    "body": ["const $1 = useRef($2);$0"],
    "description": "React useRef() hook"
  },
  "useReducer": {
    "prefix": "urdh",
    "body": [
      "const [${1:state},${2: dispatch}] = useReducer(${3:reducer}, ${4:initialArg}, ${5:init});"
    ],
    "description": "React useReducer() hook"
  },
  "import Component hero-design": {
    "prefix": "ihd",
    "body": ["import { $1 } from 'hero-design';$0"]
  },
  "import lodash fp method": {
    "prefix": "ilo",
    "body": ["import ${1:methodName} from 'lodash/fp/${1:methodName}';$0"]
  },
  "useSelector": {
    "prefix": "uss",
    "body": ["const $1 = useSelector($2);$0"]
  },
  "useDispatch": {
    "prefix": "usd",
    "body": ["const dispatch = dispatch();$0"]
  },
  "import react-redux hooks": {
    "prefix": "irrh",
    "body": ["import { useSelector, useDispatch } from 'react-redux';"]
  },
  "import renderWithRedux hooks": {
    "prefix": "irwr",
    "body": [
      "import { renderWithRedux } from 'eh-test-helper';\n",
      "import { screen, fireEvent } from '@testing-library/react';\n",
      "import fetchMock from 'fetch-mock-jest';\n"
    ]
  },
  "Typescript React Functional Component": {
    "prefix": "tsrfc",
    "body": [
      "import { Box } from '@hero-design/react';",
      "",
      "type ${1}Props = {}",
      "",
      "const ${1} = ({}: ${1}Props) => {",
      "\treturn <Box>${2:}</Box>;",
      "};",
      "",
      "export default ${1};",
      ""
    ],
    "description": "Create a Typescript React Function Component"
  },
  "describe block test": {
    "prefix": "desc",
    "body": [
      "import { renderWithRedux as render, mockFrontendEnv } from 'eh-test-helper';\n",
      "import fetchMock from 'fetch-mock-jest';\n",
      "import { getMarketplaceHost } from 'eh-utils/getFrontendEnv';",
      "import { screen, fireEvent } from '@testing-library/react';\n",
      "mockFrontendEnv('REACT_APP_MARKETPLACE_HOST', 'marketplaceHost');\n",
      "describe('$1', () => {",
      "\tit('$2', () => {",
      "\t\t$3",
      "\t});",
      "});$0"
    ],
    "description": "describe unit test syntax"
  },
  "it test case": {
    "prefix": "it",
    "body": ["it('$1', () => {", "\t$2", "});$0"],
    "description": "single unit test syntax"
  },
  "expect getByText": {
    "prefix": "egbt",
    "body": ["expect(screen.getByText(\"$1\")).toBeVisible();$0"]
  },
  "expect getByLabelText": {
    "prefix": "egbl",
    "body": ["expect(screen.getByLabelText(\"$1\")).toBeVisible();$0"]
  },
  "expect await findByText": {
    "prefix": "efbt",
    "body": ["expect(await screen.findByText(\"$1\")).toBeInTheDocument();$0"]
  },
  "expect queryByText": {
    "prefix": "eqbt",
    "body": ["expect(screen.queryByText(\"$1\")).not.toBeInTheDocument();$0"]
  },
  "expect getByRole": {
    "prefix": "egbr",
    "body": [
      "expect(screen.getByRole('${1:img}')).toHaveAttribute('src', '${2:url_link}');$0"
    ]
  },
  "fireEvent click": {
    "prefix": "fec",
    "body": [
      "fireEvent.click(screen.getByText('$1', { selector: 'button' }));$0"
    ]
  },
  "Intl formatMessage": {
    "prefix": "intlf",
    "body": "Intl.formatMessage({ id: '$1' })$0",
    "description": "redux-intl formatMessage method"
  },
  "Intl formatHTMLMessage": {
    "prefix": "intlfhtml",
    "body": "Intl.formatHTMLMessage({ id: '$1' })$0",
    "description": "redux-intl formatHTMLMessage method"
  },
  "Typography.Text": {
    "prefix": "typotx",
    "body": "<Typography.Text>$1</Typography.Text>$0",
    "description": ""
  },
  "Typography.Title": {
    "prefix": "typoti",
    "body": "<Typography.Title level={$2}>$1</Typography.Title>$0",
    "description": ""
  },
  "createSelector": {
    "prefix": "css",
    "body": ["const $1 = createSelector($2);$0"]
  }
}
